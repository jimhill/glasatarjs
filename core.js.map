{
  "version": 3,
  "sources": ["src/lib/shaders.ts", "src/lib/audio-analyzer.ts", "src/lib/privacy-glass-renderer.ts"],
  "sourcesContent": ["export const vertexShaderSource = `\n  attribute vec2 a_position;\n  attribute vec2 a_texCoord;\n  varying vec2 v_texCoord;\n  \n  void main() {\n    gl_Position = vec4(a_position, 0.0, 1.0);\n    v_texCoord = a_texCoord;\n  }\n`;\n\nexport const fragmentShaderSource = `\n  precision highp float;\n  \n  uniform sampler2D u_backgroundTexture;\n  uniform vec2 u_resolution;\n  uniform float u_opacity;\n  uniform float u_refraction;\n  uniform int u_texture;\n  uniform float u_blurAmount;\n  \n  varying vec2 v_texCoord;\n  \n  // Improved noise for glass patterns\n  vec3 mod289(vec3 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }\n  vec4 mod289(vec4 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }\n  vec4 permute(vec4 x) { return mod289(((x*34.0)+1.0)*x); }\n  vec4 taylorInvSqrt(vec4 r) { return 1.79284291400159 - 0.85373472095314 * r; }\n  \n  float snoise(vec3 v) {\n    const vec2 C = vec2(1.0/6.0, 1.0/3.0);\n    const vec4 D = vec4(0.0, 0.5, 1.0, 2.0);\n    \n    vec3 i = floor(v + dot(v, C.yyy));\n    vec3 x0 = v - i + dot(i, C.xxx);\n    \n    vec3 g = step(x0.yzx, x0.xyz);\n    vec3 l = 1.0 - g;\n    vec3 i1 = min(g.xyz, l.zxy);\n    vec3 i2 = max(g.xyz, l.zxy);\n    \n    vec3 x1 = x0 - i1 + C.xxx;\n    vec3 x2 = x0 - i2 + C.yyy;\n    vec3 x3 = x0 - D.yyy;\n    \n    i = mod289(i);\n    vec4 p = permute(permute(permute(\n             i.z + vec4(0.0, i1.z, i2.z, 1.0))\n           + i.y + vec4(0.0, i1.y, i2.y, 1.0))\n           + i.x + vec4(0.0, i1.x, i2.x, 1.0));\n           \n    float n_ = 0.142857142857;\n    vec3 ns = n_ * D.wyz - D.xzx;\n    \n    vec4 j = p - 49.0 * floor(p * ns.z * ns.z);\n    \n    vec4 x_ = floor(j * ns.z);\n    vec4 y_ = floor(j - 7.0 * x_);\n    \n    vec4 x = x_ *ns.x + ns.yyyy;\n    vec4 y = y_ *ns.x + ns.yyyy;\n    vec4 h = 1.0 - abs(x) - abs(y);\n    \n    vec4 b0 = vec4(x.xy, y.xy);\n    vec4 b1 = vec4(x.zw, y.zw);\n    \n    vec4 s0 = floor(b0)*2.0 + 1.0;\n    vec4 s1 = floor(b1)*2.0 + 1.0;\n    vec4 sh = -step(h, vec4(0.0));\n    \n    vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy;\n    vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww;\n    \n    vec3 p0 = vec3(a0.xy,h.x);\n    vec3 p1 = vec3(a0.zw,h.y);\n    vec3 p2 = vec3(a1.xy,h.z);\n    vec3 p3 = vec3(a1.zw,h.w);\n    \n    vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2,p2), dot(p3,p3)));\n    p0 *= norm.x;\n    p1 *= norm.y;\n    p2 *= norm.z;\n    p3 *= norm.w;\n    \n    vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n    m = m * m;\n    return 42.0 * dot(m*m, vec4(dot(p0,x0), dot(p1,x1), dot(p2,x2), dot(p3,x3)));\n  }\n  \n  // Optimized arctic glass - simplified crystalline pattern\n  vec2 arcticGlass(vec2 uv) {\n    float scale = 60.0;  // Reduced scale for performance\n    vec2 distortion = vec2(0.0);\n    \n    // Reduced to 2 layers for better performance\n    vec3 noiseCoord1 = vec3(uv * scale, 0.0);\n    float noise1 = abs(snoise(noiseCoord1));\n    \n    vec3 noiseCoord2 = vec3(uv * scale * 0.5, 0.5);\n    float noise2 = abs(snoise(noiseCoord2));\n    \n    // Combine layers more efficiently\n    float combined = noise1 * 0.7 + noise2 * 0.3;\n    distortion = vec2(\n      combined * cos(noise1 * 6.28),\n      combined * sin(noise1 * 6.28)\n    ) * 0.006;\n    \n    return distortion;\n  }\n  \n  // Static cathedral glass - flowing organic patterns\n  vec2 cathedralGlass(vec2 uv) {\n    vec2 distortion = vec2(0.0);\n    \n    // Large flowing patterns\n    float flow1 = snoise(vec3(uv * 4.0, 0.0));\n    float flow2 = snoise(vec3(uv * 6.0 + 100.0, 0.0));\n    \n    // Combine flows\n    float combined = flow1 * 0.6 + flow2 * 0.4;\n    \n    distortion.x = combined * 0.02;\n    distortion.y = snoise(vec3(uv * 5.0 + 50.0, 0.0)) * 0.02;\n    \n    return distortion;\n  }\n  \n  // Optimized autumn glass - simplified organic patterns  \n  vec2 autumnGlass(vec2 uv) {\n    vec2 distortion = vec2(0.0);\n    \n    // Simplified organic structures (remove loop)\n    vec3 p1 = vec3(uv * 8.0, 0.0);\n    float n1 = snoise(p1);\n    \n    vec3 p2 = vec3(uv * 12.0 + vec2(37.0, 73.0), 0.0);\n    float n2 = snoise(p2);\n    \n    // Create organic shapes more efficiently\n    float organic = smoothstep(-0.2, 0.2, n1 * 0.7 + n2 * 0.3);\n    distortion = vec2(\n      organic * cos(n1 * 3.14),\n      organic * sin(n1 * 3.14)\n    ) * 0.012;\n    \n    return distortion;\n  }\n  \n  // Static flemish glass - hammered texture\n  vec2 flemishGlass(vec2 uv) {\n    vec2 distortion = vec2(0.0);\n    \n    // Hammered dimples pattern\n    vec2 cellSize = vec2(0.03, 0.03);\n    vec2 cell = floor(uv / cellSize);\n    vec2 localUV = fract(uv / cellSize) - 0.5;\n    \n    // Random offset per cell\n    float cellHash = fract(sin(dot(cell, vec2(12.9898, 78.233))) * 43758.5453);\n    vec2 cellOffset = vec2(\n      sin(cellHash * 6.28) * 0.1,\n      cos(cellHash * 6.28) * 0.1\n    );\n    \n    // Dimple shape\n    float dimple = 1.0 - smoothstep(0.0, 0.4, length(localUV + cellOffset));\n    \n    // Calculate normal-like distortion\n    vec2 dimpleGrad = normalize(localUV + cellOffset) * dimple;\n    distortion = dimpleGrad * 0.015;\n    \n    return distortion;\n  }\n  \n  // Static ripple glass - water ripple pattern\n  vec2 rippleGlass(vec2 uv) {\n    vec2 distortion = vec2(0.0);\n    \n    // Concentric ripples from multiple centers\n    vec2 center1 = vec2(0.3, 0.7);\n    vec2 center2 = vec2(0.7, 0.2);\n    vec2 center3 = vec2(0.1, 0.1);\n    \n    float ripple1 = sin(distance(uv, center1) * 40.0) * 0.5 + 0.5;\n    float ripple2 = sin(distance(uv, center2) * 35.0) * 0.3 + 0.7;\n    float ripple3 = sin(distance(uv, center3) * 60.0) * 0.2 + 0.8;\n    \n    float combined = ripple1 * ripple2 * ripple3;\n    \n    // Create gradient for distortion\n    vec2 grad1 = normalize(uv - center1) * ripple1;\n    vec2 grad2 = normalize(uv - center2) * ripple2;\n    vec2 grad3 = normalize(uv - center3) * ripple3;\n    \n    distortion = (grad1 + grad2 + grad3) * 0.008 * combined;\n    \n    return distortion;\n  }\n  \n  // Static reeded glass - vertical ridged pattern like in image\n  vec2 reededGlass(vec2 uv) {\n    vec2 distortion = vec2(0.0);\n    \n    // Vertical ridges with organic variation\n    float ridgeSpacing = 0.08; // Distance between ridges\n    float ridgePos = uv.x / ridgeSpacing;\n    float ridgeIndex = floor(ridgePos);\n    float ridgeLocal = fract(ridgePos) - 0.5;\n    \n    // Add organic variation to ridge position\n    float ridgeVariation = snoise(vec3(ridgeIndex * 0.1, uv.y * 2.0, 0.0)) * 0.3;\n    ridgeLocal += ridgeVariation;\n    \n    // Create curved ridge profile (cylindrical lens effect)\n    float ridgeShape = 1.0 - abs(ridgeLocal * 2.0);\n    ridgeShape = smoothstep(0.0, 1.0, ridgeShape);\n    \n    // Vertical flow variation\n    float verticalFlow = snoise(vec3(uv.x * 8.0, uv.y * 3.0, 0.0)) * 0.2;\n    \n    // Primary horizontal distortion from ridges\n    distortion.x = ridgeLocal * ridgeShape * 0.02;\n    // Subtle vertical flow\n    distortion.y = verticalFlow * ridgeShape * 0.008;\n    \n    return distortion;\n  }\n  \n  // Static vintage glass - aged wavy pattern\n  vec2 vintageGlass(vec2 uv) {\n    vec2 distortion = vec2(0.0);\n    \n    // Vintage glass has characteristic waves and imperfections\n    float wave1 = sin(uv.y * 15.0 + sin(uv.x * 8.0) * 2.0);\n    float wave2 = sin(uv.x * 12.0 + sin(uv.y * 6.0) * 1.5);\n    \n    // Add some organic noise for imperfections\n    float imperfection = snoise(vec3(uv * 20.0, 0.0));\n    \n    // Combine waves with slight randomness\n    distortion.x = (wave1 * 0.4 + wave2 * 0.3 + imperfection * 0.3) * 0.01;\n    distortion.y = (sin(uv.x * 18.0) * 0.5 + cos(uv.y * 14.0) * 0.5) * 0.008;\n    \n    return distortion;\n  }\n  \n  // Optimized forest glass - simplified branching pattern\n  vec2 forestGlass(vec2 uv) {\n    vec2 distortion = vec2(0.0);\n    \n    // Create branching tree-like patterns\n    vec2 center = uv - 0.5;\n    float radius = length(center);\n    \n    // Simplified to 2 main branches for performance\n    // Branch 1\n    float branchAngle1 = snoise(vec3(uv * 4.0, 0.0)) * 0.5;\n    vec2 branchDir1 = vec2(cos(branchAngle1), sin(branchAngle1));\n    float branchDist1 = abs(dot(center, vec2(-branchDir1.y, branchDir1.x)));\n    float thickness1 = 0.02 + radius * 0.03;\n    float branch1 = (1.0 - smoothstep(0.0, thickness1, branchDist1)) * \n                    smoothstep(0.0, 0.1, radius) * (1.0 - smoothstep(0.3, 0.5, radius));\n    \n    // Branch 2  \n    float branchAngle2 = 2.094 + snoise(vec3(uv * 4.0, 1.0)) * 0.5;\n    vec2 branchDir2 = vec2(cos(branchAngle2), sin(branchAngle2));\n    float branchDist2 = abs(dot(center, vec2(-branchDir2.y, branchDir2.x)));\n    float branch2 = (1.0 - smoothstep(0.0, thickness1, branchDist2)) * \n                    smoothstep(0.0, 0.1, radius) * (1.0 - smoothstep(0.3, 0.5, radius));\n    \n    // Combine branches\n    distortion = normalize(vec2(-branchDir1.y, branchDir1.x)) * branch1 * 0.012 +\n                 normalize(vec2(-branchDir2.y, branchDir2.x)) * branch2 * 0.012;\n    \n    // Add subtle overall organic flow\n    float globalFlow = snoise(vec3(uv * 8.0, 0.0));\n    distortion += vec2(\n      cos(globalFlow * 3.14159),\n      sin(globalFlow * 3.14159)\n    ) * 0.004;\n    \n    return distortion;\n  }\n  \n  // Optimized 5-tap blur for better performance\n  vec4 blur(sampler2D tex, vec2 uv, vec2 resolution, float blurSize) {\n    vec4 color = vec4(0.0);\n    float total = 0.0;\n    \n    // 5-tap cross blur (much faster than 25-tap)\n    vec2 texelSize = blurSize / resolution;\n    \n    // Center\n    float weight = 0.4;\n    color += texture2D(tex, uv) * weight;\n    total += weight;\n    \n    // Cross pattern\n    weight = 0.15;\n    color += texture2D(tex, uv + vec2(texelSize.x, 0.0)) * weight;\n    color += texture2D(tex, uv - vec2(texelSize.x, 0.0)) * weight;\n    color += texture2D(tex, uv + vec2(0.0, texelSize.y)) * weight;\n    color += texture2D(tex, uv - vec2(0.0, texelSize.y)) * weight;\n    total += weight * 4.0;\n    \n    return color / total;\n  }\n  \n  void main() {\n    vec2 uv = v_texCoord;\n    \n    // Get static glass distortion based on pattern\n    // Use more efficient branching pattern\n    vec2 glassDistortion = vec2(0.0);\n    \n    // Group similar patterns together to reduce branching\n    if (u_texture < 4) {\n      if (u_texture < 2) {\n        glassDistortion = (u_texture == 0) ? arcticGlass(uv) : cathedralGlass(uv);\n      } else {\n        glassDistortion = (u_texture == 2) ? autumnGlass(uv) : flemishGlass(uv);\n      }\n    } else {\n      if (u_texture < 6) {\n        glassDistortion = (u_texture == 4) ? rippleGlass(uv) : reededGlass(uv);\n      } else {\n        glassDistortion = (u_texture == 6) ? vintageGlass(uv) : forestGlass(uv);\n      }\n    }\n    \n    // Apply refraction\n    vec2 refractedUV = uv + glassDistortion * u_refraction;\n    \n    // Sample background with distortion and blur\n    vec4 backgroundColor = blur(u_backgroundTexture, refractedUV, u_resolution, u_blurAmount);\n    \n    // Add subtle glass tint and highlights\n    vec3 glassTint = vec3(0.95, 0.97, 1.0); // Slight blue-white tint\n    vec3 finalColor = backgroundColor.rgb * glassTint;\n    \n    // Add surface highlights based on distortion\n    float highlight = length(glassDistortion) * 10.0;\n    highlight = smoothstep(0.0, 1.0, highlight) * 0.1;\n    finalColor += vec3(highlight);\n    \n    // Apply opacity\n    float finalAlpha = u_opacity;\n    \n    gl_FragColor = vec4(finalColor, finalAlpha);\n  }\n`;\n", "import { AudioData } from './types';\n\nexport class AudioAnalyzer {\n  private audioContext: AudioContext;\n  private analyser: AnalyserNode;\n  private source: MediaStreamAudioSourceNode | null = null;\n  private dataArray: Uint8Array<ArrayBuffer>;\n  private frequencyData: Uint8Array<ArrayBuffer>;\n  private smoothingFactor = 0.85;\n\n  constructor() {\n    this.audioContext = new (window.AudioContext ||\n      (window as any).webkitAudioContext)();\n    this.analyser = this.audioContext.createAnalyser();\n    this.analyser.fftSize = 512; // Reduced from 2048 for lower latency\n    this.analyser.smoothingTimeConstant = 0.1; // Reduced from 0.85 for faster response\n\n    const bufferLength = this.analyser.frequencyBinCount;\n    this.dataArray = new Uint8Array(new ArrayBuffer(bufferLength));\n    this.frequencyData = new Uint8Array(new ArrayBuffer(bufferLength));\n  }\n\n  connectStream(stream: MediaStream): void {\n    if (this.source) {\n      this.source.disconnect();\n    }\n\n    this.source = this.audioContext.createMediaStreamSource(stream);\n    this.source.connect(this.analyser);\n  }\n\n  getAudioData(): AudioData {\n    this.analyser.getByteTimeDomainData(this.dataArray);\n    // Only get frequency data if we actually need it for visualization\n    // this.analyser.getByteFrequencyData(this.frequencyData);\n\n    // More efficient audio level calculation using RMS\n    let sum = 0;\n    const samples = Math.min(this.dataArray.length, 1024); // Limit processing for performance\n    for (let i = 0; i < samples; i++) {\n      const amplitude = (this.dataArray[i] - 128) / 128;\n      sum += amplitude * amplitude;\n    }\n    const rms = Math.sqrt(sum / samples);\n    const audioLevel = Math.min(rms * 2, 1); // Scale and clamp\n\n    // Skip expensive frequency calculation since it's rarely used\n    // Only calculate if specifically needed for effects\n    return {\n      level: audioLevel,\n      frequency: 0, // Skip expensive calculation\n      frequencyData: new Uint8Array(0), // Empty array to save memory\n      timeDomainData: this.dataArray,\n    };\n  }\n\n  disconnect(): void {\n    if (this.source) {\n      this.source.disconnect();\n      this.source = null;\n    }\n  }\n\n  dispose(): void {\n    this.disconnect();\n    if (this.audioContext.state !== 'closed') {\n      this.audioContext.close();\n    }\n  }\n}\n", "import {\n  GlasatarConfig,\n  AudioData,\n  ShaderUniforms,\n  TextureType,\n} from './types';\nimport { vertexShaderSource, fragmentShaderSource } from './shaders';\nimport { AudioAnalyzer } from './audio-analyzer';\n\nexport class GlastarJS {\n  private canvas: HTMLCanvasElement;\n  private gl: WebGLRenderingContext | WebGL2RenderingContext;\n  private program: WebGLProgram | null = null;\n  private uniforms: ShaderUniforms;\n  private config: GlasatarConfig;\n  private audioAnalyzer: AudioAnalyzer | null = null;\n  private animationId: number | null = null;\n  private isDisposed: boolean = false;\n  private positionBuffer: WebGLBuffer | null = null;\n  private texCoordBuffer: WebGLBuffer | null = null;\n  private backgroundTexture: WebGLTexture | null = null;\n  private backgroundCanvas: HTMLCanvasElement;\n  private backgroundCtx: CanvasRenderingContext2D;\n  private smoothedAudioLevel: number = 0;\n  private backgroundImageElement: HTMLImageElement | null = null;\n  private startTime: number = Date.now();\n  private backgroundDirty: boolean = true;\n  private lastBackgroundConfig: string = '';\n  private textureNeedsUpdate: boolean = true;\n  private lastAvatarSize: number = 0;\n\n  private static readonly TEXTURE_MAP: Record<TextureType, number> = {\n    arctic: 0,\n    cathedral: 1,\n    autumn: 2,\n    flemish: 3,\n    ripple: 4,\n    reeded: 5,\n    vintage: 6,\n    forest: 7,\n  };\n\n  constructor(canvas: HTMLCanvasElement, config: Partial<GlasatarConfig> = {}) {\n    this.canvas = canvas;\n    this.config = {\n      width: config.width || 800,\n      height: config.height || 600,\n      texture: config.texture || 'arctic',\n      glassOpacity: config.glassOpacity || 0.95,\n      refractionStrength: config.refractionStrength || 1.0,\n      blurAmount: config.blurAmount || 3.0,\n      fps: config.fps || 60,\n      avatarColor: config.avatarColor || '#4A90E2',\n      avatarSize: config.avatarSize || 80,\n      avatarSensitivity: config.avatarSensitivity || 1.0,\n      avatarExpansion: config.avatarExpansion || 2.0,\n      avatarSmoothing: config.avatarSmoothing || 0.25,\n      avatarFadeWithAudio: config.avatarFadeWithAudio || false,\n      backgroundColor: config.backgroundColor || '#000000',\n      backgroundType: config.backgroundType || 'color',\n      backgroundGradient: config.backgroundGradient || {\n        centerColor: '#4A90E2',\n        edgeColor: '#1a1a2e',\n        angle: 45,\n      },\n      backgroundImage: config.backgroundImage,\n      backgroundRotation: config.backgroundRotation || false,\n      backgroundRotationSpeed: config.backgroundRotationSpeed || 10,\n      backgroundScale: config.backgroundScale || 1.0,\n    };\n\n    const gl = canvas.getContext('webgl2') || canvas.getContext('webgl');\n    if (!gl) {\n      throw new Error('WebGL not supported');\n    }\n    this.gl = gl;\n\n    this.uniforms = {\n      backgroundTexture: null,\n      resolution: null,\n      opacity: null,\n      refraction: null,\n      texture: null,\n      blurAmount: null,\n    };\n\n    // Create background canvas for avatar\n    this.backgroundCanvas = document.createElement('canvas');\n    this.backgroundCanvas.width = this.config.width;\n    this.backgroundCanvas.height = this.config.height;\n    this.backgroundCtx = this.backgroundCanvas.getContext('2d')!;\n\n    this.setupWebGL();\n    this.createBackgroundTexture();\n  }\n\n  private createShader(type: number, source: string): WebGLShader | null {\n    const shader = this.gl.createShader(type);\n    if (!shader) {\n      return null;\n    }\n\n    this.gl.shaderSource(shader, source);\n    this.gl.compileShader(shader);\n\n    if (!this.gl.getShaderParameter(shader, this.gl.COMPILE_STATUS)) {\n      console.error(\n        'Shader compilation error:',\n        this.gl.getShaderInfoLog(shader)\n      );\n      this.gl.deleteShader(shader);\n      return null;\n    }\n\n    return shader;\n  }\n\n  private setupWebGL(): void {\n    // Create shaders\n    const vertexShader = this.createShader(\n      this.gl.VERTEX_SHADER,\n      vertexShaderSource\n    );\n    const fragmentShader = this.createShader(\n      this.gl.FRAGMENT_SHADER,\n      fragmentShaderSource\n    );\n\n    if (!vertexShader || !fragmentShader) {\n      throw new Error('Failed to create shaders');\n    }\n\n    // Create program\n    this.program = this.gl.createProgram();\n    if (!this.program) {\n      throw new Error('Failed to create WebGL program');\n    }\n\n    this.gl.attachShader(this.program, vertexShader);\n    this.gl.attachShader(this.program, fragmentShader);\n    this.gl.linkProgram(this.program);\n\n    if (!this.gl.getProgramParameter(this.program, this.gl.LINK_STATUS)) {\n      throw new Error(\n        'Program linking error: ' + this.gl.getProgramInfoLog(this.program)\n      );\n    }\n\n    // Clean up shaders after linking (they're no longer needed)\n    this.gl.deleteShader(vertexShader);\n    this.gl.deleteShader(fragmentShader);\n\n    // Set up geometry\n    const positions = new Float32Array([-1, -1, 1, -1, -1, 1, 1, 1]);\n\n    const texCoords = new Float32Array([0, 1, 1, 1, 0, 0, 1, 0]);\n\n    // Create buffers\n    this.positionBuffer = this.gl.createBuffer();\n    this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.positionBuffer);\n    this.gl.bufferData(this.gl.ARRAY_BUFFER, positions, this.gl.STATIC_DRAW);\n\n    this.texCoordBuffer = this.gl.createBuffer();\n    this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.texCoordBuffer);\n    this.gl.bufferData(this.gl.ARRAY_BUFFER, texCoords, this.gl.STATIC_DRAW);\n\n    // Get uniform locations\n    this.uniforms = {\n      backgroundTexture: this.gl.getUniformLocation(\n        this.program,\n        'u_backgroundTexture'\n      ),\n      resolution: this.gl.getUniformLocation(this.program, 'u_resolution'),\n      opacity: this.gl.getUniformLocation(this.program, 'u_opacity'),\n      refraction: this.gl.getUniformLocation(this.program, 'u_refraction'),\n      texture: this.gl.getUniformLocation(this.program, 'u_texture'),\n      blurAmount: this.gl.getUniformLocation(this.program, 'u_blurAmount'),\n    };\n\n    // Set canvas size\n    this.resize(this.config.width, this.config.height);\n  }\n\n  private createBackgroundTexture(): void {\n    this.backgroundTexture = this.gl.createTexture();\n    this.gl.bindTexture(this.gl.TEXTURE_2D, this.backgroundTexture);\n\n    // Set texture parameters\n    this.gl.texParameteri(\n      this.gl.TEXTURE_2D,\n      this.gl.TEXTURE_WRAP_S,\n      this.gl.CLAMP_TO_EDGE\n    );\n    this.gl.texParameteri(\n      this.gl.TEXTURE_2D,\n      this.gl.TEXTURE_WRAP_T,\n      this.gl.CLAMP_TO_EDGE\n    );\n    this.gl.texParameteri(\n      this.gl.TEXTURE_2D,\n      this.gl.TEXTURE_MIN_FILTER,\n      this.gl.LINEAR\n    );\n    this.gl.texParameteri(\n      this.gl.TEXTURE_2D,\n      this.gl.TEXTURE_MAG_FILTER,\n      this.gl.LINEAR\n    );\n  }\n\n  private drawAvatar(audioLevel: number): void {\n    const ctx = this.backgroundCtx;\n    const width = this.backgroundCanvas.width;\n    const height = this.backgroundCanvas.height;\n\n    // Apply smoothing to audio level using exponential moving average\n    const targetLevel = audioLevel * this.config.avatarSensitivity;\n    this.smoothedAudioLevel +=\n      (targetLevel - this.smoothedAudioLevel) * this.config.avatarSmoothing;\n\n    // Check if background needs redraw\n    const currentBackgroundConfig = JSON.stringify({\n      type: this.config.backgroundType,\n      color: this.config.backgroundColor,\n      gradient: this.config.backgroundGradient,\n      image: this.config.backgroundImage,\n      rotation: this.config.backgroundRotation,\n      speed: this.config.backgroundRotationSpeed,\n      scale: this.config.backgroundScale,\n    });\n\n    if (\n      this.backgroundDirty ||\n      this.lastBackgroundConfig !== currentBackgroundConfig ||\n      this.config.backgroundRotation\n    ) {\n      // Draw background based on type (only when needed)\n      this.drawBackground(ctx, width, height);\n      this.backgroundDirty = false;\n      this.lastBackgroundConfig = currentBackgroundConfig;\n      this.textureNeedsUpdate = true;\n    }\n\n    // Avatar position (center)\n    const centerX = width / 2;\n    const centerY = height / 2;\n\n    // Calculate avatar size based on smoothed audio level\n    const baseSize = this.config.avatarSize;\n    const maxExpansionSize = baseSize * this.config.avatarExpansion;\n    const expandedSize =\n      baseSize + this.smoothedAudioLevel * (maxExpansionSize - baseSize);\n\n    // Calculate opacity based on audio level if fade is enabled\n    let avatarOpacity = 1.0;\n    if (this.config.avatarFadeWithAudio) {\n      // Very aggressive fade scaling - reaches full opacity very quickly\n      // Use steep power curve to make even quiet speech reach high opacity\n      const scaledLevel = this.smoothedAudioLevel * 8.0; // Much higher multiplier\n      avatarOpacity = Math.max(0.0, Math.min(1.0, Math.pow(scaledLevel, 0.3))); // Much steeper curve\n    }\n\n    // Create radial gradient for soft edges with dynamic opacity\n    const gradient = ctx.createRadialGradient(\n      centerX,\n      centerY,\n      0,\n      centerX,\n      centerY,\n      expandedSize\n    );\n\n    // Parse the avatar color (assuming hex format) and apply opacity\n    const color = this.config.avatarColor;\n    const centerOpacity = Math.round(avatarOpacity * 255)\n      .toString(16)\n      .padStart(2, '0');\n    const edgeOpacity = Math.round(avatarOpacity * 128)\n      .toString(16)\n      .padStart(2, '0'); // 50% of center opacity\n\n    gradient.addColorStop(0, color + centerOpacity);\n    gradient.addColorStop(0.7, color + edgeOpacity);\n    gradient.addColorStop(1, color + '00'); // Always fully transparent at edge\n\n    // Draw the avatar circle\n    ctx.fillStyle = gradient;\n    ctx.beginPath();\n    ctx.arc(centerX, centerY, expandedSize, 0, Math.PI * 2);\n    ctx.fill();\n\n    // Only mark texture for update if avatar actually changed significantly\n    // This reduces GPU texture uploads for minor audio level changes\n    if (\n      Math.abs(expandedSize - this.lastAvatarSize) > 0.5 ||\n      Math.abs(avatarOpacity - 1.0) > 0.01\n    ) {\n      this.textureNeedsUpdate = true;\n    }\n    this.lastAvatarSize = expandedSize;\n  }\n\n  private drawBackground(\n    ctx: CanvasRenderingContext2D,\n    width: number,\n    height: number\n  ): void {\n    const centerX = width / 2;\n    const centerY = height / 2;\n\n    // Calculate rotation angle if enabled\n    let rotationAngle = 0;\n    if (this.config.backgroundRotation) {\n      const elapsed = (Date.now() - this.startTime) / 1000; // seconds\n      rotationAngle =\n        (elapsed * this.config.backgroundRotationSpeed! * Math.PI) / 180; // degrees to radians\n    }\n\n    ctx.save();\n\n    // Apply transformations: translate to center, scale, rotate, translate back\n    ctx.translate(centerX, centerY);\n    if (this.config.backgroundScale! !== 1.0) {\n      ctx.scale(this.config.backgroundScale!, this.config.backgroundScale!);\n    }\n    if (rotationAngle !== 0) {\n      ctx.rotate(rotationAngle);\n    }\n    ctx.translate(-centerX, -centerY);\n\n    switch (this.config.backgroundType) {\n      case 'color':\n        ctx.fillStyle = this.config.backgroundColor;\n        ctx.fillRect(0, 0, width, height);\n        break;\n\n      case 'radial-gradient': {\n        const radialGradient = ctx.createRadialGradient(\n          centerX,\n          centerY,\n          0,\n          centerX,\n          centerY,\n          (Math.max(width, height) / 2) * this.config.backgroundScale!\n        );\n        radialGradient.addColorStop(\n          0,\n          this.config.backgroundGradient!.centerColor\n        );\n        radialGradient.addColorStop(\n          1,\n          this.config.backgroundGradient!.edgeColor\n        );\n        ctx.fillStyle = radialGradient;\n        ctx.fillRect(0, 0, width, height);\n        break;\n      }\n\n      case 'linear-gradient': {\n        const angle =\n          ((this.config.backgroundGradient!.angle || 0) * Math.PI) / 180;\n        const diagonal =\n          (Math.sqrt(width * width + height * height) *\n            this.config.backgroundScale!) /\n          2;\n\n        // Calculate start and end points for the linear gradient\n        const startX = centerX - Math.cos(angle) * diagonal;\n        const startY = centerY - Math.sin(angle) * diagonal;\n        const endX = centerX + Math.cos(angle) * diagonal;\n        const endY = centerY + Math.sin(angle) * diagonal;\n\n        const linearGradient = ctx.createLinearGradient(\n          startX,\n          startY,\n          endX,\n          endY\n        );\n        linearGradient.addColorStop(\n          0,\n          this.config.backgroundGradient!.centerColor\n        );\n        linearGradient.addColorStop(\n          1,\n          this.config.backgroundGradient!.edgeColor\n        );\n        ctx.fillStyle = linearGradient;\n        ctx.fillRect(0, 0, width, height);\n        break;\n      }\n\n      case 'image':\n        if (\n          this.backgroundImageElement &&\n          this.backgroundImageElement.complete\n        ) {\n          // Draw image to fill the canvas while maintaining aspect ratio\n          const imgAspect =\n            this.backgroundImageElement.width /\n            this.backgroundImageElement.height;\n          const canvasAspect = width / height;\n\n          let drawWidth, drawHeight, drawX, drawY;\n\n          if (imgAspect > canvasAspect) {\n            // Image is wider, fit to height\n            drawHeight = height;\n            drawWidth = height * imgAspect;\n            drawX = (width - drawWidth) / 2;\n            drawY = 0;\n          } else {\n            // Image is taller, fit to width\n            drawWidth = width;\n            drawHeight = width / imgAspect;\n            drawX = 0;\n            drawY = (height - drawHeight) / 2;\n          }\n\n          ctx.drawImage(\n            this.backgroundImageElement,\n            drawX,\n            drawY,\n            drawWidth,\n            drawHeight\n          );\n        } else {\n          // Fallback to color if image not loaded\n          ctx.fillStyle = this.config.backgroundColor;\n          ctx.fillRect(0, 0, width, height);\n        }\n        break;\n    }\n\n    ctx.restore();\n  }\n\n  private loadBackgroundImage(): void {\n    if (!this.config.backgroundImage) {\n      // Clean up existing image if no image is set\n      if (this.backgroundImageElement) {\n        this.backgroundImageElement.onload = null;\n        this.backgroundImageElement.onerror = null;\n        this.backgroundImageElement.src = '';\n        this.backgroundImageElement = null;\n      }\n      return;\n    }\n\n    // Clean up existing image before loading new one\n    if (this.backgroundImageElement) {\n      this.backgroundImageElement.onload = null;\n      this.backgroundImageElement.onerror = null;\n      this.backgroundImageElement.src = '';\n    }\n\n    this.backgroundImageElement = new Image();\n    this.backgroundImageElement.crossOrigin = 'anonymous';\n    this.backgroundImageElement.onload = () => {\n      // Image loaded, will be used in next render\n    };\n    this.backgroundImageElement.onerror = () => {\n      console.warn(\n        'Failed to load background image:',\n        this.config.backgroundImage\n      );\n      if (this.backgroundImageElement) {\n        this.backgroundImageElement.onload = null;\n        this.backgroundImageElement.onerror = null;\n        this.backgroundImageElement = null;\n      }\n    };\n    this.backgroundImageElement.src = this.config.backgroundImage;\n  }\n\n  connectAudioStream(stream: MediaStream): void {\n    if (!this.audioAnalyzer) {\n      this.audioAnalyzer = new AudioAnalyzer();\n    }\n    this.audioAnalyzer.connectStream(stream);\n  }\n\n  updateConfig(config: Partial<GlasatarConfig>): void {\n    this.config = { ...this.config, ...config };\n\n    // Mark background as dirty if any background-related config changed\n    const backgroundKeys = [\n      'backgroundColor',\n      'backgroundType',\n      'backgroundGradient',\n      'backgroundImage',\n      'backgroundRotation',\n      'backgroundRotationSpeed',\n      'backgroundScale',\n    ];\n    if (\n      backgroundKeys.some(key =>\n        Object.prototype.hasOwnProperty.call(config, key)\n      )\n    ) {\n      this.backgroundDirty = true;\n    }\n\n    if (config.width !== undefined || config.height !== undefined) {\n      this.resize(this.config.width, this.config.height);\n      this.backgroundDirty = true;\n    }\n    if (config.backgroundImage !== undefined) {\n      this.loadBackgroundImage();\n    }\n  }\n\n  resize(width: number, height: number): void {\n    this.canvas.width = width;\n    this.canvas.height = height;\n    this.backgroundCanvas.width = width;\n    this.backgroundCanvas.height = height;\n    this.gl.viewport(0, 0, width, height);\n  }\n\n  private render = (): void => {\n    if (!this.program || this.isDisposed) {\n      return;\n    }\n\n    // Get audio data\n    let audioData: AudioData = {\n      level: 0,\n      frequency: 0,\n      frequencyData: new Uint8Array(0),\n      timeDomainData: new Uint8Array(0),\n    };\n\n    if (this.audioAnalyzer) {\n      audioData = this.audioAnalyzer.getAudioData();\n    }\n\n    // Draw avatar based on audio level\n    this.drawAvatar(audioData.level);\n\n    // Update background texture with avatar (only when changed)\n    if (this.textureNeedsUpdate) {\n      this.gl.bindTexture(this.gl.TEXTURE_2D, this.backgroundTexture);\n      this.gl.texImage2D(\n        this.gl.TEXTURE_2D,\n        0,\n        this.gl.RGBA,\n        this.gl.RGBA,\n        this.gl.UNSIGNED_BYTE,\n        this.backgroundCanvas\n      );\n      this.textureNeedsUpdate = false;\n    }\n\n    // Clear and render glass effect\n    this.gl.clearColor(0, 0, 0, 0);\n    this.gl.clear(this.gl.COLOR_BUFFER_BIT);\n\n    this.gl.enable(this.gl.BLEND);\n    this.gl.blendFunc(this.gl.SRC_ALPHA, this.gl.ONE_MINUS_SRC_ALPHA);\n\n    this.gl.useProgram(this.program);\n\n    // Set uniforms (static glass texture)\n    this.gl.uniform1i(this.uniforms.backgroundTexture, 0);\n    this.gl.uniform2f(\n      this.uniforms.resolution,\n      this.canvas.width,\n      this.canvas.height\n    );\n    this.gl.uniform1f(this.uniforms.opacity, this.config.glassOpacity);\n    this.gl.uniform1f(this.uniforms.refraction, this.config.refractionStrength);\n    this.gl.uniform1i(\n      this.uniforms.texture,\n      GlastarJS.TEXTURE_MAP[this.config.texture]\n    );\n    this.gl.uniform1f(this.uniforms.blurAmount, this.config.blurAmount);\n\n    // Bind texture\n    this.gl.activeTexture(this.gl.TEXTURE0);\n    this.gl.bindTexture(this.gl.TEXTURE_2D, this.backgroundTexture);\n\n    // Bind attributes\n    const positionLocation = this.gl.getAttribLocation(\n      this.program,\n      'a_position'\n    );\n    const texCoordLocation = this.gl.getAttribLocation(\n      this.program,\n      'a_texCoord'\n    );\n\n    this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.positionBuffer);\n    this.gl.enableVertexAttribArray(positionLocation);\n    this.gl.vertexAttribPointer(\n      positionLocation,\n      2,\n      this.gl.FLOAT,\n      false,\n      0,\n      0\n    );\n\n    this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.texCoordBuffer);\n    this.gl.enableVertexAttribArray(texCoordLocation);\n    this.gl.vertexAttribPointer(\n      texCoordLocation,\n      2,\n      this.gl.FLOAT,\n      false,\n      0,\n      0\n    );\n\n    // Draw\n    this.gl.drawArrays(this.gl.TRIANGLE_STRIP, 0, 4);\n\n    // Only schedule next frame if not disposed\n    if (!this.isDisposed) {\n      this.animationId = requestAnimationFrame(this.render);\n    }\n  };\n\n  start(): void {\n    if (!this.animationId) {\n      this.render();\n    }\n  }\n\n  stop(): void {\n    if (this.animationId) {\n      cancelAnimationFrame(this.animationId);\n      this.animationId = null;\n    }\n  }\n\n  dispose(): void {\n    this.isDisposed = true;\n    this.stop();\n\n    if (this.audioAnalyzer) {\n      this.audioAnalyzer.dispose();\n      this.audioAnalyzer = null;\n    }\n\n    // Clean up WebGL resources\n    if (this.program) {\n      this.gl.deleteProgram(this.program);\n      this.program = null;\n    }\n\n    if (this.positionBuffer) {\n      this.gl.deleteBuffer(this.positionBuffer);\n      this.positionBuffer = null;\n    }\n\n    if (this.texCoordBuffer) {\n      this.gl.deleteBuffer(this.texCoordBuffer);\n      this.texCoordBuffer = null;\n    }\n\n    if (this.backgroundTexture) {\n      this.gl.deleteTexture(this.backgroundTexture);\n      this.backgroundTexture = null;\n    }\n\n    // Clean up image resources\n    if (this.backgroundImageElement) {\n      this.backgroundImageElement.onload = null;\n      this.backgroundImageElement.onerror = null;\n      this.backgroundImageElement.src = '';\n      this.backgroundImageElement = null;\n    }\n\n    // Clean up canvas resources\n    if (this.backgroundCanvas) {\n      this.backgroundCanvas.width = 0;\n      this.backgroundCanvas.height = 0;\n    }\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAO,IAAM,qBAAqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAW3B,IAAM,uBAAugBAAN,MAAoB;AAAA,EAQzB,cAAc;AALd,SAAQ,SAA4C;AAGpD,SAAQ,kBAAkB;AAGxB,SAAK,eAAe,KAAK,OAAO,gBAC7B,OAAe,oBAAoB;AACtC,SAAK,WAAW,KAAK,aAAa,eAAe;AACjD,SAAK,SAAS,UAAU;AACxB,SAAK,SAAS,wBAAwB;AAEtC,UAAM,eAAe,KAAK,SAAS;AACnC,SAAK,YAAY,IAAI,WAAW,IAAI,YAAY,YAAY,CAAC;AAC7D,SAAK,gBAAgB,IAAI,WAAW,IAAI,YAAY,YAAY,CAAC;AAAA,EACnE;AAAA,EAEA,cAAc,QAA2B;AACvC,QAAI,KAAK,QAAQ;AACf,WAAK,OAAO,WAAW;AAAA,IACzB;AAEA,SAAK,SAAS,KAAK,aAAa,wBAAwB,MAAM;AAC9D,SAAK,OAAO,QAAQ,KAAK,QAAQ;AAAA,EACnC;AAAA,EAEA,eAA0B;AACxB,SAAK,SAAS,sBAAsB,KAAK,SAAS;AAKlD,QAAI,MAAM;AACV,UAAM,UAAU,KAAK,IAAI,KAAK,UAAU,QAAQ,IAAI;AACpD,aAAS,IAAI,GAAG,IAAI,SAAS,KAAK;AAChC,YAAM,aAAa,KAAK,UAAU,CAAC,IAAI,OAAO;AAC9C,aAAO,YAAY;AAAA,IACrB;AACA,UAAM,MAAM,KAAK,KAAK,MAAM,OAAO;AACnC,UAAM,aAAa,KAAK,IAAI,MAAM,GAAG,CAAC;AAItC,WAAO;AAAA,MACL,OAAO;AAAA,MACP,WAAW;AAAA;AAAA,MACX,eAAe,IAAI,WAAW,CAAC;AAAA;AAAA,MAC/B,gBAAgB,KAAK;AAAA,IACvB;AAAA,EACF;AAAA,EAEA,aAAmB;AACjB,QAAI,KAAK,QAAQ;AACf,WAAK,OAAO,WAAW;AACvB,WAAK,SAAS;AAAA,IAChB;AAAA,EACF;AAAA,EAEA,UAAgB;AACd,SAAK,WAAW;AAChB,QAAI,KAAK,aAAa,UAAU,UAAU;AACxC,WAAK,aAAa,MAAM;AAAA,IAC1B;AAAA,EACF;AACF;;;AC5DO,IAAM,aAAN,MAAM,WAAU;AAAA,EAiCrB,YAAY,QAA2B,SAAkC,CAAC,GAAG;AA9B7E,SAAQ,UAA+B;AAGvC,SAAQ,gBAAsC;AAC9C,SAAQ,cAA6B;AACrC,SAAQ,aAAsB;AAC9B,SAAQ,iBAAqC;AAC7C,SAAQ,iBAAqC;AAC7C,SAAQ,oBAAyC;AAGjD,SAAQ,qBAA6B;AACrC,SAAQ,yBAAkD;AAC1D,SAAQ,YAAoB,KAAK,IAAI;AACrC,SAAQ,kBAA2B;AACnC,SAAQ,uBAA+B;AACvC,SAAQ,qBAA8B;AACtC,SAAQ,iBAAyB;AA0ejC,SAAQ,SAAS,MAAY;AAC3B,UAAI,CAAC,KAAK,WAAW,KAAK,YAAY;AACpC;AAAA,MACF;AAGA,UAAI,YAAuB;AAAA,QACzB,OAAO;AAAA,QACP,WAAW;AAAA,QACX,eAAe,IAAI,WAAW,CAAC;AAAA,QAC/B,gBAAgB,IAAI,WAAW,CAAC;AAAA,MAClC;AAEA,UAAI,KAAK,eAAe;AACtB,oBAAY,KAAK,cAAc,aAAa;AAAA,MAC9C;AAGA,WAAK,WAAW,UAAU,KAAK;AAG/B,UAAI,KAAK,oBAAoB;AAC3B,aAAK,GAAG,YAAY,KAAK,GAAG,YAAY,KAAK,iBAAiB;AAC9D,aAAK,GAAG;AAAA,UACN,KAAK,GAAG;AAAA,UACR;AAAA,UACA,KAAK,GAAG;AAAA,UACR,KAAK,GAAG;AAAA,UACR,KAAK,GAAG;AAAA,UACR,KAAK;AAAA,QACP;AACA,aAAK,qBAAqB;AAAA,MAC5B;AAGA,WAAK,GAAG,WAAW,GAAG,GAAG,GAAG,CAAC;AAC7B,WAAK,GAAG,MAAM,KAAK,GAAG,gBAAgB;AAEtC,WAAK,GAAG,OAAO,KAAK,GAAG,KAAK;AAC5B,WAAK,GAAG,UAAU,KAAK,GAAG,WAAW,KAAK,GAAG,mBAAmB;AAEhE,WAAK,GAAG,WAAW,KAAK,OAAO;AAG/B,WAAK,GAAG,UAAU,KAAK,SAAS,mBAAmB,CAAC;AACpD,WAAK,GAAG;AAAA,QACN,KAAK,SAAS;AAAA,QACd,KAAK,OAAO;AAAA,QACZ,KAAK,OAAO;AAAA,MACd;AACA,WAAK,GAAG,UAAU,KAAK,SAAS,SAAS,KAAK,OAAO,YAAY;AACjE,WAAK,GAAG,UAAU,KAAK,SAAS,YAAY,KAAK,OAAO,kBAAkB;AAC1E,WAAK,GAAG;AAAA,QACN,KAAK,SAAS;AAAA,QACd,WAAU,YAAY,KAAK,OAAO,OAAO;AAAA,MAC3C;AACA,WAAK,GAAG,UAAU,KAAK,SAAS,YAAY,KAAK,OAAO,UAAU;AAGlE,WAAK,GAAG,cAAc,KAAK,GAAG,QAAQ;AACtC,WAAK,GAAG,YAAY,KAAK,GAAG,YAAY,KAAK,iBAAiB;AAG9D,YAAM,mBAAmB,KAAK,GAAG;AAAA,QAC/B,KAAK;AAAA,QACL;AAAA,MACF;AACA,YAAM,mBAAmB,KAAK,GAAG;AAAA,QAC/B,KAAK;AAAA,QACL;AAAA,MACF;AAEA,WAAK,GAAG,WAAW,KAAK,GAAG,cAAc,KAAK,cAAc;AAC5D,WAAK,GAAG,wBAAwB,gBAAgB;AAChD,WAAK,GAAG;AAAA,QACN;AAAA,QACA;AAAA,QACA,KAAK,GAAG;AAAA,QACR;AAAA,QACA;AAAA,QACA;AAAA,MACF;AAEA,WAAK,GAAG,WAAW,KAAK,GAAG,cAAc,KAAK,cAAc;AAC5D,WAAK,GAAG,wBAAwB,gBAAgB;AAChD,WAAK,GAAG;AAAA,QACN;AAAA,QACA;AAAA,QACA,KAAK,GAAG;AAAA,QACR;AAAA,QACA;AAAA,QACA;AAAA,MACF;AAGA,WAAK,GAAG,WAAW,KAAK,GAAG,gBAAgB,GAAG,CAAC;AAG/C,UAAI,CAAC,KAAK,YAAY;AACpB,aAAK,cAAc,sBAAsB,KAAK,MAAM;AAAA,MACtD;AAAA,IACF;AAjkBE,SAAK,SAAS;AACd,SAAK,SAAS;AAAA,MACZ,OAAO,OAAO,SAAS;AAAA,MACvB,QAAQ,OAAO,UAAU;AAAA,MACzB,SAAS,OAAO,WAAW;AAAA,MAC3B,cAAc,OAAO,gBAAgB;AAAA,MACrC,oBAAoB,OAAO,sBAAsB;AAAA,MACjD,YAAY,OAAO,cAAc;AAAA,MACjC,KAAK,OAAO,OAAO;AAAA,MACnB,aAAa,OAAO,eAAe;AAAA,MACnC,YAAY,OAAO,cAAc;AAAA,MACjC,mBAAmB,OAAO,qBAAqB;AAAA,MAC/C,iBAAiB,OAAO,mBAAmB;AAAA,MAC3C,iBAAiB,OAAO,mBAAmB;AAAA,MAC3C,qBAAqB,OAAO,uBAAuB;AAAA,MACnD,iBAAiB,OAAO,mBAAmB;AAAA,MAC3C,gBAAgB,OAAO,kBAAkB;AAAA,MACzC,oBAAoB,OAAO,sBAAsB;AAAA,QAC/C,aAAa;AAAA,QACb,WAAW;AAAA,QACX,OAAO;AAAA,MACT;AAAA,MACA,iBAAiB,OAAO;AAAA,MACxB,oBAAoB,OAAO,sBAAsB;AAAA,MACjD,yBAAyB,OAAO,2BAA2B;AAAA,MAC3D,iBAAiB,OAAO,mBAAmB;AAAA,IAC7C;AAEA,UAAM,KAAK,OAAO,WAAW,QAAQ,KAAK,OAAO,WAAW,OAAO;AACnE,QAAI,CAAC,IAAI;AACP,YAAM,IAAI,MAAM,qBAAqB;AAAA,IACvC;AACA,SAAK,KAAK;AAEV,SAAK,WAAW;AAAA,MACd,mBAAmB;AAAA,MACnB,YAAY;AAAA,MACZ,SAAS;AAAA,MACT,YAAY;AAAA,MACZ,SAAS;AAAA,MACT,YAAY;AAAA,IACd;AAGA,SAAK,mBAAmB,SAAS,cAAc,QAAQ;AACvD,SAAK,iBAAiB,QAAQ,KAAK,OAAO;AAC1C,SAAK,iBAAiB,SAAS,KAAK,OAAO;AAC3C,SAAK,gBAAgB,KAAK,iBAAiB,WAAW,IAAI;AAE1D,SAAK,WAAW;AAChB,SAAK,wBAAwB;AAAA,EAC/B;AAAA,EAEQ,aAAa,MAAc,QAAoC;AACrE,UAAM,SAAS,KAAK,GAAG,aAAa,IAAI;AACxC,QAAI,CAAC,QAAQ;AACX,aAAO;AAAA,IACT;AAEA,SAAK,GAAG,aAAa,QAAQ,MAAM;AACnC,SAAK,GAAG,cAAc,MAAM;AAE5B,QAAI,CAAC,KAAK,GAAG,mBAAmB,QAAQ,KAAK,GAAG,cAAc,GAAG;AAC/D,cAAQ;AAAA,QACN;AAAA,QACA,KAAK,GAAG,iBAAiB,MAAM;AAAA,MACjC;AACA,WAAK,GAAG,aAAa,MAAM;AAC3B,aAAO;AAAA,IACT;AAEA,WAAO;AAAA,EACT;AAAA,EAEQ,aAAmB;AAEzB,UAAM,eAAe,KAAK;AAAA,MACxB,KAAK,GAAG;AAAA,MACR;AAAA,IACF;AACA,UAAM,iBAAiB,KAAK;AAAA,MAC1B,KAAK,GAAG;AAAA,MACR;AAAA,IACF;AAEA,QAAI,CAAC,gBAAgB,CAAC,gBAAgB;AACpC,YAAM,IAAI,MAAM,0BAA0B;AAAA,IAC5C;AAGA,SAAK,UAAU,KAAK,GAAG,cAAc;AACrC,QAAI,CAAC,KAAK,SAAS;AACjB,YAAM,IAAI,MAAM,gCAAgC;AAAA,IAClD;AAEA,SAAK,GAAG,aAAa,KAAK,SAAS,YAAY;AAC/C,SAAK,GAAG,aAAa,KAAK,SAAS,cAAc;AACjD,SAAK,GAAG,YAAY,KAAK,OAAO;AAEhC,QAAI,CAAC,KAAK,GAAG,oBAAoB,KAAK,SAAS,KAAK,GAAG,WAAW,GAAG;AACnE,YAAM,IAAI;AAAA,QACR,4BAA4B,KAAK,GAAG,kBAAkB,KAAK,OAAO;AAAA,MACpE;AAAA,IACF;AAGA,SAAK,GAAG,aAAa,YAAY;AACjC,SAAK,GAAG,aAAa,cAAc;AAGnC,UAAM,YAAY,IAAI,aAAa,CAAC,IAAI,IAAI,GAAG,IAAI,IAAI,GAAG,GAAG,CAAC,CAAC;AAE/D,UAAM,YAAY,IAAI,aAAa,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC;AAG3D,SAAK,iBAAiB,KAAK,GAAG,aAAa;AAC3C,SAAK,GAAG,WAAW,KAAK,GAAG,cAAc,KAAK,cAAc;AAC5D,SAAK,GAAG,WAAW,KAAK,GAAG,cAAc,WAAW,KAAK,GAAG,WAAW;AAEvE,SAAK,iBAAiB,KAAK,GAAG,aAAa;AAC3C,SAAK,GAAG,WAAW,KAAK,GAAG,cAAc,KAAK,cAAc;AAC5D,SAAK,GAAG,WAAW,KAAK,GAAG,cAAc,WAAW,KAAK,GAAG,WAAW;AAGvE,SAAK,WAAW;AAAA,MACd,mBAAmB,KAAK,GAAG;AAAA,QACzB,KAAK;AAAA,QACL;AAAA,MACF;AAAA,MACA,YAAY,KAAK,GAAG,mBAAmB,KAAK,SAAS,cAAc;AAAA,MACnE,SAAS,KAAK,GAAG,mBAAmB,KAAK,SAAS,WAAW;AAAA,MAC7D,YAAY,KAAK,GAAG,mBAAmB,KAAK,SAAS,cAAc;AAAA,MACnE,SAAS,KAAK,GAAG,mBAAmB,KAAK,SAAS,WAAW;AAAA,MAC7D,YAAY,KAAK,GAAG,mBAAmB,KAAK,SAAS,cAAc;AAAA,IACrE;AAGA,SAAK,OAAO,KAAK,OAAO,OAAO,KAAK,OAAO,MAAM;AAAA,EACnD;AAAA,EAEQ,0BAAgC;AACtC,SAAK,oBAAoB,KAAK,GAAG,cAAc;AAC/C,SAAK,GAAG,YAAY,KAAK,GAAG,YAAY,KAAK,iBAAiB;AAG9D,SAAK,GAAG;AAAA,MACN,KAAK,GAAG;AAAA,MACR,KAAK,GAAG;AAAA,MACR,KAAK,GAAG;AAAA,IACV;AACA,SAAK,GAAG;AAAA,MACN,KAAK,GAAG;AAAA,MACR,KAAK,GAAG;AAAA,MACR,KAAK,GAAG;AAAA,IACV;AACA,SAAK,GAAG;AAAA,MACN,KAAK,GAAG;AAAA,MACR,KAAK,GAAG;AAAA,MACR,KAAK,GAAG;AAAA,IACV;AACA,SAAK,GAAG;AAAA,MACN,KAAK,GAAG;AAAA,MACR,KAAK,GAAG;AAAA,MACR,KAAK,GAAG;AAAA,IACV;AAAA,EACF;AAAA,EAEQ,WAAW,YAA0B;AAC3C,UAAM,MAAM,KAAK;AACjB,UAAM,QAAQ,KAAK,iBAAiB;AACpC,UAAM,SAAS,KAAK,iBAAiB;AAGrC,UAAM,cAAc,aAAa,KAAK,OAAO;AAC7C,SAAK,uBACF,cAAc,KAAK,sBAAsB,KAAK,OAAO;AAGxD,UAAM,0BAA0B,KAAK,UAAU;AAAA,MAC7C,MAAM,KAAK,OAAO;AAAA,MAClB,OAAO,KAAK,OAAO;AAAA,MACnB,UAAU,KAAK,OAAO;AAAA,MACtB,OAAO,KAAK,OAAO;AAAA,MACnB,UAAU,KAAK,OAAO;AAAA,MACtB,OAAO,KAAK,OAAO;AAAA,MACnB,OAAO,KAAK,OAAO;AAAA,IACrB,CAAC;AAED,QACE,KAAK,mBACL,KAAK,yBAAyB,2BAC9B,KAAK,OAAO,oBACZ;AAEA,WAAK,eAAe,KAAK,OAAO,MAAM;AACtC,WAAK,kBAAkB;AACvB,WAAK,uBAAuB;AAC5B,WAAK,qBAAqB;AAAA,IAC5B;AAGA,UAAM,UAAU,QAAQ;AACxB,UAAM,UAAU,SAAS;AAGzB,UAAM,WAAW,KAAK,OAAO;AAC7B,UAAM,mBAAmB,WAAW,KAAK,OAAO;AAChD,UAAM,eACJ,WAAW,KAAK,sBAAsB,mBAAmB;AAG3D,QAAI,gBAAgB;AACpB,QAAI,KAAK,OAAO,qBAAqB;AAGnC,YAAM,cAAc,KAAK,qBAAqB;AAC9C,sBAAgB,KAAK,IAAI,GAAK,KAAK,IAAI,GAAK,KAAK,IAAI,aAAa,GAAG,CAAC,CAAC;AAAA,IACzE;AAGA,UAAM,WAAW,IAAI;AAAA,MACnB;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACF;AAGA,UAAM,QAAQ,KAAK,OAAO;AAC1B,UAAM,gBAAgB,KAAK,MAAM,gBAAgB,GAAG,EACjD,SAAS,EAAE,EACX,SAAS,GAAG,GAAG;AAClB,UAAM,cAAc,KAAK,MAAM,gBAAgB,GAAG,EAC/C,SAAS,EAAE,EACX,SAAS,GAAG,GAAG;AAElB,aAAS,aAAa,GAAG,QAAQ,aAAa;AAC9C,aAAS,aAAa,KAAK,QAAQ,WAAW;AAC9C,aAAS,aAAa,GAAG,QAAQ,IAAI;AAGrC,QAAI,YAAY;AAChB,QAAI,UAAU;AACd,QAAI,IAAI,SAAS,SAAS,cAAc,GAAG,KAAK,KAAK,CAAC;AACtD,QAAI,KAAK;AAIT,QACE,KAAK,IAAI,eAAe,KAAK,cAAc,IAAI,OAC/C,KAAK,IAAI,gBAAgB,CAAG,IAAI,MAChC;AACA,WAAK,qBAAqB;AAAA,IAC5B;AACA,SAAK,iBAAiB;AAAA,EACxB;AAAA,EAEQ,eACN,KACA,OACA,QACM;AACN,UAAM,UAAU,QAAQ;AACxB,UAAM,UAAU,SAAS;AAGzB,QAAI,gBAAgB;AACpB,QAAI,KAAK,OAAO,oBAAoB;AAClC,YAAM,WAAW,KAAK,IAAI,IAAI,KAAK,aAAa;AAChD,sBACG,UAAU,KAAK,OAAO,0BAA2B,KAAK,KAAM;AAAA,IACjE;AAEA,QAAI,KAAK;AAGT,QAAI,UAAU,SAAS,OAAO;AAC9B,QAAI,KAAK,OAAO,oBAAqB,GAAK;AACxC,UAAI,MAAM,KAAK,OAAO,iBAAkB,KAAK,OAAO,eAAgB;AAAA,IACtE;AACA,QAAI,kBAAkB,GAAG;AACvB,UAAI,OAAO,aAAa;AAAA,IAC1B;AACA,QAAI,UAAU,CAAC,SAAS,CAAC,OAAO;AAEhC,YAAQ,KAAK,OAAO,gBAAgB;AAAA,MAClC,KAAK;AACH,YAAI,YAAY,KAAK,OAAO;AAC5B,YAAI,SAAS,GAAG,GAAG,OAAO,MAAM;AAChC;AAAA,MAEF,KAAK,mBAAmB;AACtB,cAAM,iBAAiB,IAAI;AAAA,UACzB;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACC,KAAK,IAAI,OAAO,MAAM,IAAI,IAAK,KAAK,OAAO;AAAA,QAC9C;AACA,uBAAe;AAAA,UACb;AAAA,UACA,KAAK,OAAO,mBAAoB;AAAA,QAClC;AACA,uBAAe;AAAA,UACb;AAAA,UACA,KAAK,OAAO,mBAAoB;AAAA,QAClC;AACA,YAAI,YAAY;AAChB,YAAI,SAAS,GAAG,GAAG,OAAO,MAAM;AAChC;AAAA,MACF;AAAA,MAEA,KAAK,mBAAmB;AACtB,cAAM,SACF,KAAK,OAAO,mBAAoB,SAAS,KAAK,KAAK,KAAM;AAC7D,cAAM,WACH,KAAK,KAAK,QAAQ,QAAQ,SAAS,MAAM,IACxC,KAAK,OAAO,kBACd;AAGF,cAAM,SAAS,UAAU,KAAK,IAAI,KAAK,IAAI;AAC3C,cAAM,SAAS,UAAU,KAAK,IAAI,KAAK,IAAI;AAC3C,cAAM,OAAO,UAAU,KAAK,IAAI,KAAK,IAAI;AACzC,cAAM,OAAO,UAAU,KAAK,IAAI,KAAK,IAAI;AAEzC,cAAM,iBAAiB,IAAI;AAAA,UACzB;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,QACF;AACA,uBAAe;AAAA,UACb;AAAA,UACA,KAAK,OAAO,mBAAoB;AAAA,QAClC;AACA,uBAAe;AAAA,UACb;AAAA,UACA,KAAK,OAAO,mBAAoB;AAAA,QAClC;AACA,YAAI,YAAY;AAChB,YAAI,SAAS,GAAG,GAAG,OAAO,MAAM;AAChC;AAAA,MACF;AAAA,MAEA,KAAK;AACH,YACE,KAAK,0BACL,KAAK,uBAAuB,UAC5B;AAEA,gBAAM,YACJ,KAAK,uBAAuB,QAC5B,KAAK,uBAAuB;AAC9B,gBAAM,eAAe,QAAQ;AAE7B,cAAI,WAAW,YAAY,OAAO;AAElC,cAAI,YAAY,cAAc;AAE5B,yBAAa;AACb,wBAAY,SAAS;AACrB,qBAAS,QAAQ,aAAa;AAC9B,oBAAQ;AAAA,UACV,OAAO;AAEL,wBAAY;AACZ,yBAAa,QAAQ;AACrB,oBAAQ;AACR,qBAAS,SAAS,cAAc;AAAA,UAClC;AAEA,cAAI;AAAA,YACF,KAAK;AAAA,YACL;AAAA,YACA;AAAA,YACA;AAAA,YACA;AAAA,UACF;AAAA,QACF,OAAO;AAEL,cAAI,YAAY,KAAK,OAAO;AAC5B,cAAI,SAAS,GAAG,GAAG,OAAO,MAAM;AAAA,QAClC;AACA;AAAA,IACJ;AAEA,QAAI,QAAQ;AAAA,EACd;AAAA,EAEQ,sBAA4B;AAClC,QAAI,CAAC,KAAK,OAAO,iBAAiB;AAEhC,UAAI,KAAK,wBAAwB;AAC/B,aAAK,uBAAuB,SAAS;AACrC,aAAK,uBAAuB,UAAU;AACtC,aAAK,uBAAuB,MAAM;AAClC,aAAK,yBAAyB;AAAA,MAChC;AACA;AAAA,IACF;AAGA,QAAI,KAAK,wBAAwB;AAC/B,WAAK,uBAAuB,SAAS;AACrC,WAAK,uBAAuB,UAAU;AACtC,WAAK,uBAAuB,MAAM;AAAA,IACpC;AAEA,SAAK,yBAAyB,IAAI,MAAM;AACxC,SAAK,uBAAuB,cAAc;AAC1C,SAAK,uBAAuB,SAAS,MAAM;AAAA,IAE3C;AACA,SAAK,uBAAuB,UAAU,MAAM;AAC1C,cAAQ;AAAA,QACN;AAAA,QACA,KAAK,OAAO;AAAA,MACd;AACA,UAAI,KAAK,wBAAwB;AAC/B,aAAK,uBAAuB,SAAS;AACrC,aAAK,uBAAuB,UAAU;AACtC,aAAK,yBAAyB;AAAA,MAChC;AAAA,IACF;AACA,SAAK,uBAAuB,MAAM,KAAK,OAAO;AAAA,EAChD;AAAA,EAEA,mBAAmB,QAA2B;AAC5C,QAAI,CAAC,KAAK,eAAe;AACvB,WAAK,gBAAgB,IAAI,cAAc;AAAA,IACzC;AACA,SAAK,cAAc,cAAc,MAAM;AAAA,EACzC;AAAA,EAEA,aAAa,QAAuC;AAClD,SAAK,SAAS,kCAAK,KAAK,SAAW;AAGnC,UAAM,iBAAiB;AAAA,MACrB;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACF;AACA,QACE,eAAe;AAAA,MAAK,SAClB,OAAO,UAAU,eAAe,KAAK,QAAQ,GAAG;AAAA,IAClD,GACA;AACA,WAAK,kBAAkB;AAAA,IACzB;AAEA,QAAI,OAAO,UAAU,UAAa,OAAO,WAAW,QAAW;AAC7D,WAAK,OAAO,KAAK,OAAO,OAAO,KAAK,OAAO,MAAM;AACjD,WAAK,kBAAkB;AAAA,IACzB;AACA,QAAI,OAAO,oBAAoB,QAAW;AACxC,WAAK,oBAAoB;AAAA,IAC3B;AAAA,EACF;AAAA,EAEA,OAAO,OAAe,QAAsB;AAC1C,SAAK,OAAO,QAAQ;AACpB,SAAK,OAAO,SAAS;AACrB,SAAK,iBAAiB,QAAQ;AAC9B,SAAK,iBAAiB,SAAS;AAC/B,SAAK,GAAG,SAAS,GAAG,GAAG,OAAO,MAAM;AAAA,EACtC;AAAA,EAyGA,QAAc;AACZ,QAAI,CAAC,KAAK,aAAa;AACrB,WAAK,OAAO;AAAA,IACd;AAAA,EACF;AAAA,EAEA,OAAa;AACX,QAAI,KAAK,aAAa;AACpB,2BAAqB,KAAK,WAAW;AACrC,WAAK,cAAc;AAAA,IACrB;AAAA,EACF;AAAA,EAEA,UAAgB;AACd,SAAK,aAAa;AAClB,SAAK,KAAK;AAEV,QAAI,KAAK,eAAe;AACtB,WAAK,cAAc,QAAQ;AAC3B,WAAK,gBAAgB;AAAA,IACvB;AAGA,QAAI,KAAK,SAAS;AAChB,WAAK,GAAG,cAAc,KAAK,OAAO;AAClC,WAAK,UAAU;AAAA,IACjB;AAEA,QAAI,KAAK,gBAAgB;AACvB,WAAK,GAAG,aAAa,KAAK,cAAc;AACxC,WAAK,iBAAiB;AAAA,IACxB;AAEA,QAAI,KAAK,gBAAgB;AACvB,WAAK,GAAG,aAAa,KAAK,cAAc;AACxC,WAAK,iBAAiB;AAAA,IACxB;AAEA,QAAI,KAAK,mBAAmB;AAC1B,WAAK,GAAG,cAAc,KAAK,iBAAiB;AAC5C,WAAK,oBAAoB;AAAA,IAC3B;AAGA,QAAI,KAAK,wBAAwB;AAC/B,WAAK,uBAAuB,SAAS;AACrC,WAAK,uBAAuB,UAAU;AACtC,WAAK,uBAAuB,MAAM;AAClC,WAAK,yBAAyB;AAAA,IAChC;AAGA,QAAI,KAAK,kBAAkB;AACzB,WAAK,iBAAiB,QAAQ;AAC9B,WAAK,iBAAiB,SAAS;AAAA,IACjC;AAAA,EACF;AACF;AA9pBa,WAsBa,cAA2C;AAAA,EACjE,QAAQ;AAAA,EACR,WAAW;AAAA,EACX,QAAQ;AAAA,EACR,SAAS;AAAA,EACT,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,SAAS;AAAA,EACT,QAAQ;AACV;AA/BK,IAAM,YAAN;",
  "names": []
}
